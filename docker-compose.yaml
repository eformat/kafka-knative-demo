version: '3.5'

services:
  zookeeper:
    image: strimzi/kafka:0.11.3-kafka-2.1.0
    command: [
      "sh", "-c",
      'bin/zookeeper-server-start.sh config/zookeeper.properties'
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - my-network
  kafka:
    image: strimzi/kafka:0.11.3-kafka-2.1.0
    command: [
      "sh", "-c",
      'bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT} --override group.min.session.timeout.ms=$${KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS}'
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${HOSTNAME:-kafka}:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_GROUP_MIN_SESSION_TIMEOUT_MS: 100
    networks:
      - my-network

  weather-db:
    image: debezium/example-postgres:1.1
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgresuser
      - POSTGRES_PASSWORD=postgrespw
      - POSTGRES_DB=weatherdb
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
    - my-network

  connect:
    image: debezium/connect:1.1
    ports:
      - 8083:8083
    links:
      - kafka
      - weather-db
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    networks:
      - my-network

  sensors:
    image: kafka-knative-demo/kafka-knative-sensors:1.0
    build:
      context: sensors
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - my-network

  aggregator:
    image: kafka-knative-demo/kafka-knative-aggregator:1.0
    build:
      context: aggregator
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    environment:
      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - my-network

  temperature-map:
    image: kafka-knative-demo/kafka-knative-map:1.0
    ports:
      - 8080:8080
    build:
      context: temperature-map
      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MAP_READ_FROM_TOPIC: "true"
    networks:
      - my-network

networks:
  my-network:
    name: weather-network
